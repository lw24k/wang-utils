{"version":3,"file":"wang_utils.js","sources":["../src/function/call.js","../src/array/declares.js","../src/array/concat.js","../src/function/type.js","../src/object/compareObj.js","../src/array/pull.js","../src/string/index.js","../src/axios/index.js","../src/event-bus/index.js","../src/promise/index.js","../src/pub-sub/index.js","../src/da/sort2.js","../src/storage/index.js","../src/da/priority-queue.js","../src/da/queue.js","../src/da/stack.js","../src/number/index.js","../src/function/apply.js","../src/function/bind.js","../src/browser/index.js","../src/da/sort.js","../src/array/chunk.js","../src/object/clone.js","../src/array/compact.js","../src/array/compareArr.js","../src/function/debounce.js","../src/object/deepClone.js","../src/array/index.js","../src/array/difference.js","../src/array/drop.js","../src/array/tree.js","../src/array/flatten.js","../src/array/mergeArray.js","../src/object/mergeObject.js","../src/object/myInstanceOf.js","../src/object/newInstance.js","../src/array/slice.js","../src/function/throttle.js","../src/array/unique.js"],"sourcesContent":["export default function call (fn, obj, ...args) {\r\n  // console.log('call()')\r\n  // 执行函数\r\n  // this(...args)\r\n\r\n  // 处理obj是undefined或者null的情况\r\n  if (obj===undefined || obj===null) {\r\n    obj = window\r\n  }\r\n\r\n  // 给obj添加一个方法: tempFn: this\r\n  obj.tempFn = fn\r\n  // 调用obj的tempFn方法, 传入rags参数, 得到返回值\r\n  const result = obj.tempFn(...args)\r\n  // 删除obj上的temFn\r\n  delete obj.tempFn\r\n  // 返回方法的返回值\r\n  return result\r\n}","\r\nexport function map (array, callback) {\r\n  const arr = []\r\n  // 遍历当前数组每个元素, 调用callback得到一个结果数据, 添加arr\r\n  for (let index = 0; index < array.length; index++) {\r\n    const element = array[index];\r\n    const result = callback(element, index)\r\n    arr.push(result)\r\n  }\r\n  return arr\r\n}\r\n\r\nexport function reduce (array,callback, initValue) {\r\n  // 结果为初始值\r\n  let total = initValue\r\n  // 遍历当前数组每个元素, 调用callback得到一个累加的结果数据\r\n  for (let index = 0; index < array.length; index++) {\r\n    const element = array[index];\r\n    total = callback(total, element, index)\r\n  }\r\n\r\n  // 返回结果\r\n  return total\r\n}  \r\n\r\nexport function filter (array,callback) {\r\n  const arr = []\r\n  // 遍历当前数组每个元素, 调用callback得到一个布尔值, 如果为true, 将当前element添加到arr\r\n  for (let index = 0; index < array.length; index++) {\r\n    const element = array[index];\r\n    const result = callback(element, index)\r\n    if (result) {\r\n      arr.push(element)\r\n    }\r\n  }\r\n  return arr\r\n}  \r\n\r\nexport function find (array,callback) {\r\n  // 遍历当前数组每个元素, 调用callback得到一个布尔值, 如果为true, 返回当前元素\r\n  for (let index = 0; index < array.length; index++) {\r\n    const element = array[index];\r\n    const result = callback(element, index)\r\n    if (result) {\r\n      return element\r\n    }\r\n  }\r\n  return undefined\r\n}  \r\n\r\nexport function findIndex (array,callback) {\r\n  // 遍历当前数组每个元素, 调用callback得到一个布尔值, 如果为true, 返回当前元素的下标\r\n  for (let index = 0; index < array.length; index++) {\r\n    const element = array[index];\r\n    const result = callback(element, index)\r\n    if (result) {\r\n      return index\r\n    }\r\n  }\r\n  return -1\r\n}  \r\n\r\nexport function every (array,callback) {\r\n  // 遍历当前数组每个元素, 调用callback得到一个布尔值, 一旦是false, 返回false\r\n  for (let index = 0; index < array.length; index++) {\r\n    const element = array[index];\r\n    const result = callback(element, index)\r\n    if (!result) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}  \r\n\r\nexport function some (array,callback) {\r\n  // 遍历当前数组每个元素, 调用callback得到一个布尔值, 一旦是true, 返回true\r\n  for (let index = 0; index < array.length; index++) {\r\n    const element = array[index];\r\n    const result = callback(element, index)\r\n    if (result) {\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}  ","/* \r\n语法: var new_array = concat(array, value1[, value2[, ...[, valueN]]]) \r\n功能: 将n个数组或值与当前数组合并生成一个新数组, 原始数组不会被改变 \r\n*/\r\nexport function concat (array, ...values) {\r\n  const arr = [...array]\r\n  // 遍历values, 将value或者value中的元素添加arr中\r\n  values.forEach(value => {\r\n    if (Array.isArray(value)) {\r\n      arr.push(...value)\r\n    } else {\r\n      arr.push(value)\r\n    }\r\n  })\r\n  \r\n  return arr\r\n}","/**\r\n * \r\n * @param {*} data \r\n * @returns 'bool' | 'number' | 'string' | 'undefined' | 'null' | 'array' | 'object' | 'function' | 'sorry! unrecognized'\r\n */\r\nexport function type(data){\r\n\tlet dataType = Object.prototype.toString.call(data);\r\n\tswitch(dataType){\r\n\t\tcase '[object Boolean]':\r\n\t\t\treturn 'bool';\r\n\t\tcase '[object Number]':\r\n\t\t\treturn 'number';\r\n\t\tcase '[object String]':\r\n\t\t\treturn 'string';\r\n\t\tcase '[object Undefined]':\r\n\t\t\treturn 'undefined';\r\n\t\tcase '[object Null]':\r\n\t\t\treturn 'null';\r\n\t\tcase '[object Array]':\r\n\t\t\treturn 'array';\r\n\t\tcase '[object Object]':\r\n\t\t\treturn 'object';\r\n\t\tcase '[object Function]':\r\n\t\t\treturn 'function';\r\n\t\tcase '[object Date]':\r\n\t\t\treturn 'date';\r\n\t\tcase '[object RegExp]':\r\n\t\t\treturn 'regExp';\r\n\t\tcase '[object Error]':\r\n\t\t\t\treturn 'error'\r\n\t\tcase '[object Symbol]':\r\n\t\t\t\treturn 'symbol';\r\n\t\tcase '[object Promise]':\r\n\t\t\t\treturn 'promise';\r\n\t\tcase '[object Set]':\r\n\t\t\t\treturn 'set';\r\n\t\tdefault:\r\n\t\t\treturn 'sorry! unrecognized';\r\n\t}\r\n}\r\n","\r\nimport {type} from '../function/type';\r\n/**\r\n * \r\n * @param {Object} x \r\n * @param {Object} y \r\n * @returns {bool}\r\n */\r\nexport function compareObj(x, y) {\r\n\tvar i, l, leftChain, rightChain;\r\n\tfunction compare2Objects(x, y) {\r\n\t\tvar p;\r\n\r\n\t\tif (isNaN(x) && isNaN(y) && typeof x === 'number' && typeof y === 'number') {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (x === y) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif ((typeof x === 'function' && typeof y === 'function') ||\r\n\t\t\t(x instanceof Date && y instanceof Date) ||\r\n\t\t\t(x instanceof RegExp && y instanceof RegExp) ||\r\n\t\t\t(x instanceof String && y instanceof String) ||\r\n\t\t\t(x instanceof Number && y instanceof Number)) {\r\n\t\t\treturn x.toString() === y.toString();\r\n\t\t}\r\n\t\tif (!(x instanceof Object && y instanceof Object)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (x.isPrototypeOf(y) || y.isPrototypeOf(x)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (x.constructor !== y.constructor) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (x.prototype !== y.prototype) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (leftChain.indexOf(x) > -1 || rightChain.indexOf(y) > -1) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tfor (p in y) {\r\n\t\t\tif (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\r\n\t\t\t\treturn false;\r\n\t\t\t} else if (typeof y[p] !== typeof x[p]) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (p in x) {\r\n\t\t\tif (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\r\n\t\t\t\treturn false;\r\n\t\t\t} else if (typeof y[p] !== typeof x[p]) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (typeof (x[p])) {\r\n\t\t\t\tcase 'object':\r\n\t\t\t\tcase 'function':\r\n\t\t\t\t\tleftChain.push(x);\r\n\t\t\t\t\trightChain.push(y);\r\n\t\t\t\t\tif (!compare2Objects(x[p], y[p])) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tleftChain.pop();\r\n\t\t\t\t\trightChain.pop();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (x[p] !== y[p]) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tif (arguments.length < 1) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfor (i = 1, l = arguments.length; i < l; i++) {\r\n\r\n\t\tleftChain = []; //Todo: this can be cached\r\n\t\trightChain = [];\r\n\r\n\t\tif (!compare2Objects(arguments[0], arguments[i])) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n","/* \r\n1. pull(array, ...values): \r\n        删除数组中与value相同的元素, 返回所有删除元素的数组\r\n        说明: 数组发生了改变\r\n        如: pull([1,3,5,3,7], 2, 7, 3, 7) ===> 数组变为[1, 5], 返回值为[3,3,7]\r\n    2. pullAll(array, values): \r\n        功能与pull一致, 只是参数变为数组\r\n        如: pullAll([1,3,5,3,7], [2, 7, 3, 7]) ===> 数组变为[1, 5], 返回值为[3,3,7]\r\n*/\r\n\r\nexport function pull(array, ...values) {\r\n  const result = []\r\n\r\n  for (let index = 0; index < array.length; index++) {\r\n    const item = array[index];\r\n    if (values.indexOf(item)!==-1) {// 如果有\r\n      // 删除item\r\n      array.splice(index, 1)\r\n      // 将item添加到result数组\r\n      result.push(item)\r\n      index-- // 如果不做, 下一个元素就没有得到遍历\r\n    }\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport function pullAll(array, values) {\r\n\r\n  return pull(array, ...values)\r\n}","/* \r\n1. 字符串倒序: reverseString(str)  生成一个倒序的字符串\r\n2. 字符串是否是回文: palindrome(str) 如果给定的字符串是回文，则返回 true ；否则返回 false\r\n3. 截取字符串: truncate(str, num) 如果字符串的长度超过了num, 截取前面num长度部分, 并以...结束\r\n*/\r\nexport function reverseString(str) {\r\n  return str.split('').reverse().join('')\r\n}\r\n\r\nexport function palindrome(str) {\r\n  return str === reverseString(str)\r\n}\r\n\r\nexport function truncate(str, num) {\r\n  return str.length > num ? str.substring(0, num) + '...' : str\r\n}\r\n\r\n/**\r\n * \r\n * @param {number|string} timestamp \r\n * @param {string} format 'year' || 'month' || 'day' || 'hour' || 'minute' || 'second' \r\n * @returns \r\n */\r\nexport function getDate(timestamp, format) {\r\n  if (timestamp && isNaN(timestamp)) return false;\r\n  if ((timestamp + '').includes('.')) return false;\r\n  var _timestamp = timestamp || new Date().getTime();\r\n  function add0(m) { return m < 10 ? '0' + m : m }\r\n  var time = new Date(Number(_timestamp));\r\n  var y = time.getFullYear();\r\n  var m = time.getMonth() + 1;\r\n  var d = time.getDate();\r\n  var h = time.getHours();\r\n  var mm = time.getMinutes();\r\n  var s = time.getSeconds();\r\n  switch (format) {\r\n    case 'year':\r\n      return y;\r\n    case 'month':\r\n      return y + '-' + add0(m);\r\n    case 'day':\r\n      return y + '-' + add0(m) + '-' + add0(d);\r\n    case 'hour':\r\n      return y + '-' + add0(m) + '-' + add0(d) + ' ' + add0(h);\r\n    case 'minute':\r\n      return y + '-' + add0(m) + '-' + add0(d) + ' ' + add0(h) + ':' + add0(mm);\r\n    case 'second':\r\n      return y + '-' + add0(m) + '-' + add0(d) + ' ' + add0(h) + ':' + add0(mm) + ':' + add0(s);\r\n    default:\r\n      return y + '-' + add0(m) + '-' + add0(d) + ' ' + add0(h) + ':' + add0(mm) + ':' + add0(s);\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @param {number|string} stamp1 时间戳\r\n * @param {number|string} stamp2 时间戳\r\n * @returns {string} 俩个时间戳的间隔\r\n */\r\nexport function stampInterval(stamp1, stamp2) {\r\n  var t = stamp1 > stamp2 ? stamp1 : stamp2,\r\n    e = stamp1 > stamp2 ? stamp2 : stamp1;\r\n  var n = [0, 0, 0, 0],\r\n    r = \"\",\r\n    o = t > e ? parseInt((t - e) / 1e3) : 0;\r\n  return n[0] = o > 86400 ? parseInt(o / 86400) : 0, o -= 86400 * n[0], n[1] = o > 3600 ? parseInt(o / 3600) : 0,\r\n    o -= 3600 * n[1], n[2] = o > 60 ? parseInt(o / 60) : 0, n[3] = o - 60 * n[2], r = n[0] > 0 ? n[0] + \"天\" : \"\",\r\n    r += n[0] <= 0 && n[1] <= 0 ? \"\" : n[1] + \"小时\", r += n[0] <= 0 && n[1] <= 0 && n[2] <= 0 ? \"\" : n[2] + \"分钟\",\r\n    r += n[0] <= 0 && n[1] <= 0 && n[2] <= 0 && n[3] <= 0 ? \"\" : n[3] + \"秒\"\r\n}\r\n\r\n/**\r\n * @param {number} num 距离当日num天的日期\r\n * @param {number} str 日期分隔符 '-'、'/'...\r\n *  @returns {string}\r\n * */\r\nexport function dateByday(num = 0, str = '-') {\r\n  var today = new Date();\r\n  var nowTime = today.getTime();\r\n  var ms = 24 * 3600 * 1000 * num;\r\n  today.setTime(parseInt(nowTime + ms));\r\n  var oYear = today.getFullYear();\r\n  var oMoth = (today.getMonth() + 1).toString();\r\n  if (oMoth.length <= 1) oMoth = '0' + oMoth;\r\n  var oDay = today.getDate().toString();\r\n  if (oDay.length <= 1) oDay = '0' + oDay;\r\n  return oYear + str + oMoth + str + oDay;\r\n}\r\n\r\n/**\r\n * 获取url的query参数对象\r\n * @param {string} url \r\n * @returns {object}\r\n */\r\nexport function getQuery(url) {\r\n  var object = {};\r\n  arr = url.split(\"?\")[1].split(\"&\");\r\n  for (var i = 0; i < arr.length; i++) {\r\n    var arr1 = arr[i].split(\"=\");\r\n    var key = arr1[0];\r\n    var value = arr1[1];\r\n    object[key] = value;\r\n  }\r\n  return object;\r\n}\r\n\r\n/**\r\n * 去除空格\r\n * @param {str}\r\n * @param {type} \r\n *    type: 1-所有空格 2-前后空格 3-前空格 4-后空格\r\n * @return {String}\r\n */\r\nexport function trim(str, type) {\r\n  type = type || 1\r\n  switch (type) {\r\n    case 1:\r\n      return str.replace(/\\s+/g, \"\");\r\n    case 2:\r\n      return str.replace(/(^\\s*)|(\\s*$)/g, \"\");\r\n    case 3:\r\n      return str.replace(/(^\\s*)/g, \"\");\r\n    case 4:\r\n      return str.replace(/(\\s*$)/g, \"\");\r\n    default:\r\n      return str;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {str} \r\n * @param {type}\r\n *    type: 1:首字母大写 2：首页母小写 3：大小写转换 4：全部大写 5：全部小写\r\n * @return {String}\r\n */\r\nexport function changeCase(str, type) {\r\n  type = type || 4\r\n  switch (type) {\r\n    case 1:\r\n      return str.replace(/\\b\\w+\\b/g, function (word) {\r\n        return word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase();\r\n      });\r\n    case 2:\r\n      return str.replace(/\\b\\w+\\b/g, function (word) {\r\n        return word.substring(0, 1).toLowerCase() + word.substring(1).toUpperCase();\r\n      });\r\n    case 3:\r\n      return str.split('').map(function (word) {\r\n        if (/[a-z]/.test(word)) {\r\n          return word.toUpperCase();\r\n        } else {\r\n          return word.toLowerCase()\r\n        }\r\n      }).join('')\r\n    case 4:\r\n      return str.toUpperCase();\r\n    case 5:\r\n      return str.toLowerCase();\r\n    default:\r\n      return str;\r\n  }\r\n}\r\n","/* \r\n  1. 函数的返回值为promise, 成功的结果为response, 失败的结果为error\r\n  2. 能处理多种类型的请求: GET/POST/PUT/DELETE\r\n  3. 函数的参数为一个配置对象\r\n      {\r\n        url: '',   // 请求地址\r\n        method: '',   // 请求方式GET/POST/PUT/DELETE\r\n        params: {},  // GET/DELETE请求的query参数\r\n        data: {}, // POST或DELETE请求的请求体参数 \r\n      }\r\n  4. 响应json数据自动解析为js的对象/数组\r\n*/\r\n/* 发送任意类型请求的函数 */\r\nfunction axios({\r\n  url,\r\n  method='GET',\r\n  params={},\r\n  data={}\r\n}) {\r\n  // 返回一个promise对象\r\n  return new Promise((resolve, reject) => {\r\n\r\n    // 处理method(转大写)\r\n    method = method.toUpperCase()\r\n\r\n    // 处理query参数(拼接到url上)   id=1&xxx=abc\r\n    /* \r\n    {\r\n      id: 1,\r\n      xxx: 'abc'\r\n    }\r\n    */\r\n    let queryString = ''\r\n    Object.keys(params).forEach(key => {\r\n      queryString += `${key}=${params[key]}&`\r\n    })\r\n    if (queryString) { // id=1&xxx=abc&\r\n      // 去除最后的&\r\n      queryString = queryString.substring(0, queryString.length-1)\r\n      // 接到url\r\n      url += '?' + queryString\r\n    }\r\n\r\n\r\n    // 1. 执行异步ajax请求\r\n    // 创建xhr对象\r\n    const request = new XMLHttpRequest()\r\n    // 打开连接(初始化请求, 没有请求)\r\n    request.open(method, url, true)\r\n\r\n    // 发送请求\r\n    if (method==='GET') {\r\n      request.send()\r\n    } else if (method==='POST' || method==='PUT' || method==='DELETE'){\r\n      request.setRequestHeader('Content-Type', 'application/json;charset=utf-8') // 告诉服务器请求体的格式是json\r\n      request.send(JSON.stringify(data)) // 发送json格式请求体参数\r\n    }\r\n\r\n    // 绑定状态改变的监听\r\n    request.onreadystatechange = function () {\r\n      // 如果请求没有完成, 直接结束\r\n      if (request.readyState!==4) {\r\n        return\r\n      }\r\n      // 如果响应状态码在[200, 300)之间代表成功, 否则失败\r\n      const {status, statusText} = request\r\n      // 2.1. 如果请求成功了, 调用resolve()\r\n      if (status>=200 && status<=299) {\r\n        // 准备结果数据对象response\r\n        const response = {\r\n          data: JSON.parse(request.response),\r\n          status,\r\n          statusText\r\n        }\r\n        resolve(response)\r\n      } else { // 2.2. 如果请求失败了, 调用reject()\r\n        reject(new Error('request error status is ' + status))\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n/* 发送特定请求的静态方法 */\r\naxios.get = function (url, options) {\r\n  return axios(Object.assign(options, {url, method: 'GET'}))\r\n}\r\naxios.delete = function (url, options) {\r\n  return axios(Object.assign(options, {url, method: 'DELETE'}))\r\n}\r\naxios.post = function (url, data, options) {\r\n  return axios(Object.assign(options, {url, data, method: 'POST'}))\r\n}\r\naxios.put = function (url, data, options) {\r\n  return axios(Object.assign(options, {url, data, method: 'PUT'}))\r\n}\r\n\r\nexport default axios","const eventBus = {}\r\n\r\n/* \r\n{\r\n  add:  [callback1, callback2]\r\n  delete: [callback3]\r\n}\r\n*/\r\nlet callbacksObj = {}\r\n\r\n/* \r\n绑定事件监听\r\n*/\r\neventBus.on = function (eventName, callback) {\r\n  const callbacks = callbacksObj[eventName]\r\n  if (callbacks) {\r\n    callbacks.push(callback)\r\n  } else {\r\n    callbacksObj[eventName] = [callback]\r\n  }\r\n}\r\n\r\n/* \r\n分发事件\r\n*/\r\neventBus.emit = function (eventName, data) {\r\n  const callbacks = callbacksObj[eventName]\r\n  if (callbacks && callbacks.length > 0) {\r\n    callbacks.forEach(callback => {\r\n      callback(data)\r\n    })\r\n  }\r\n}\r\n\r\n/* \r\n移除事件监听\r\n*/\r\neventBus.off = function (eventName) {\r\n  if (eventName) {\r\n    delete callbacksObj[eventName]\r\n  } else {\r\n    callbacksObj = {}\r\n  }\r\n}\r\n\r\nexport default eventBus","const PENDING = 'pending' // 初始未确定的状态\r\nconst RESOLVED = 'resolved' // 成功的状态\r\nconst REJECTED = 'rejected' // 失败的状态\r\n\r\n/* \r\nPromise构造函数\r\n*/\r\nfunction Promise(excutor) {\r\n\r\n  const self = this // Promise的实例对象\r\n  self.status = PENDING // 状态属性, 初始值为pending, 代表初始未确定的状态\r\n  self.data = undefined // 用来存储结果数据的属性, 初始值为undefined\r\n  self.callbacks = [] // {onResolved(){}, onRejected(){}}\r\n\r\n  /* \r\n  将promise的状态改为成功, 指定成功的value\r\n  */\r\n  function resolve(value) {\r\n    // 如果当前不是pending, 直接结束\r\n    if (self.status !== PENDING) return\r\n\r\n    self.status = RESOLVED // 将状态改为成功\r\n    self.data = value // 保存成功的value\r\n\r\n    // 异步调用所有缓存的待执行成功的回调函数\r\n    if (self.callbacks.length > 0) {\r\n      // 启动一个延迟时间为0的定时器, 在定时器的回调中执行所有成功的回调\r\n      setTimeout(() => {\r\n        self.callbacks.forEach(cbsObj => {\r\n          cbsObj.onResolved(value)\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  /* \r\n  将promise的状态改为失败, 指定失败的reason\r\n  */\r\n  function reject(reason) {\r\n    // 如果当前不是pending, 直接结束\r\n    if (self.status !== PENDING) return\r\n\r\n    self.status = REJECTED // 将状态改为失败\r\n    self.data = reason // 保存reason数据\r\n\r\n    // 异步调用所有缓存的待执行失败的回调函数\r\n    if (self.callbacks.length > 0) {\r\n      // 启动一个延迟时间为0的定时器, 在定时器的回调中执行所有失败的回调\r\n      setTimeout(() => {\r\n        self.callbacks.forEach(cbsObj => {\r\n          cbsObj.onRejected(reason)\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  // 调用excutor来启动异步任务\r\n  try {\r\n    excutor(resolve, reject)\r\n  } catch (error) { // 执行器执行出错, 当前promise变为失败\r\n    console.log('-----')\r\n    reject(error)\r\n  }\r\n\r\n}\r\n\r\n/* \r\n用来指定成功/失败回调函数的方法\r\n    1). 如果当前promise是resolved, 异步执行成功的回调函数onResolved\r\n    2). 如果当前promise是rejected, 异步执行成功的回调函数onRejected\r\n    3). 如果当前promise是pending, 保存回调函数\r\n返回一个新的promise对象\r\n    它的结果状态由onResolved或者onRejected执行的结果决定\r\n    2.1). 抛出error ==> 变为rejected, 结果值为error\r\n    2.2). 返回值不是promise   ==> 变为resolved, 结果值为返回值\r\n    2.3). 返回值是promise    ===> 由这个promise的决定新的promise的结果(成功/失败)\r\n*/\r\nPromise.prototype.then = function (onResolved, onRejected) {\r\n  const self = this\r\n\r\n  onResolved = typeof onResolved === 'function' ? onResolved : value => value // 将value向下传递\r\n  onRejected = typeof onRejected === 'function' ? onRejected : reason => {\r\n    throw reason\r\n  } // 将reason向下传递\r\n\r\n  return new Promise((resolve, reject) => { // 什么时候改变它的状态\r\n\r\n    /* \r\n    1. 调用指定的回调函数\r\n    2. 根据回调执行结果来更新返回promise的状态\r\n    */\r\n    function handle(callback) {\r\n      try {\r\n        const result = callback(self.data)\r\n        if (!(result instanceof Promise)) { //  2.2). 返回值不是promise   ==> 变为resolved, 结果值为返回值\r\n          resolve(result)\r\n        } else { // 2.3). 返回值是promise    ===> 由这个promise的决定新的promise的结果(成功/失败)\r\n          result.then(\r\n            value => resolve(value),\r\n            reason => reject(reason)\r\n          )\r\n          // result.then(resolve, reject)\r\n        }\r\n      } catch (error) { // 2.1). 抛出error ==> 变为rejected, 结果值为error\r\n        reject(error)\r\n      }\r\n    }\r\n\r\n    if (self.status === RESOLVED) {\r\n      setTimeout(() => {\r\n        handle(onResolved)\r\n      })\r\n    } else if (self.status === REJECTED) {\r\n      setTimeout(() => {\r\n        handle(onRejected)\r\n      })\r\n    } else { // PENDING\r\n      self.callbacks.push({\r\n        onResolved(value) {\r\n          handle(onResolved)\r\n        },\r\n        onRejected(reason) {\r\n          handle(onRejected)\r\n        }\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\n/* \r\n用来指定失败回调函数的方法\r\ncatch是then的语法糖\r\n*/\r\nPromise.prototype.catch = function (onRejected) {\r\n  return this.then(undefined, onRejected)\r\n}\r\n\r\n/* \r\n用来返回一个指定vlaue的成功的promise\r\nvalue可能是一个一般的值, 也可能是promise对象\r\n*/\r\nPromise.resolve = function (value) {\r\n  return new Promise((resolve, reject) => {\r\n    // 如果value是一个promise, 最终返回的promise的结果由value决定\r\n    if (value instanceof Promise) {\r\n      value.then(resolve, reject)\r\n    } else { // value不是promise, 返回的是成功的promise, 成功的值就是value\r\n      resolve(value)\r\n    }\r\n  })\r\n}\r\n\r\n/* \r\n用来返回一个指定reason的失败的promise\r\n*/\r\nPromise.reject = function (reason) {\r\n  return new Promise((resolve, reject) => {\r\n    reject(reason)\r\n  })\r\n}\r\n\r\n/* \r\n返回一个promise, 只有当数组中所有promise都成功才成功, 否则失败\r\n*/\r\nPromise.all = function (promises) {\r\n  return new Promise((resolve, reject) => {\r\n\r\n    let resolvedCount = 0 // 已经成功的数量 \r\n    const values = new Array(promises.length) // 用来保存成功promise的value值\r\n    // 遍历所有promise, 取其对应的结果\r\n    promises.forEach((p, index) => {\r\n      p.then(\r\n        value => {\r\n          resolvedCount++\r\n          values[index] = value\r\n          if (resolvedCount === promises.length) { // 都成功了\r\n            resolve(values)\r\n          }\r\n        },\r\n        reason => reject(reason)\r\n      )\r\n    })\r\n  })\r\n}\r\n\r\n/* \r\n返回一个promise, 由第一个完成promise决定\r\n*/\r\nPromise.race = function (promises) {\r\n  return new Promise((resolve, reject) => {\r\n    // 遍历所有promise, 取其对应的结果\r\n    promises.forEach(p => {\r\n      // 返回的promise由第一个完成p来决定其结果\r\n      p.then(resolve, reject)\r\n    })\r\n  })\r\n}\r\n\r\n/* \r\n返回一个延迟指定时间才成功(也可能失败)的promise\r\n*/\r\nPromise.resolveDelay = function (value, time) {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      // 如果value是一个promise, 最终返回的promise的结果由value决定\r\n      if (value instanceof Promise) {\r\n        value.then(resolve, reject)\r\n      } else { // value不是promise, 返回的是成功的promise, 成功的值就是value\r\n        resolve(value)\r\n      }\r\n    }, time)\r\n  })\r\n}\r\n\r\n/* \r\n返回一个延迟指定时间才失败的promise\r\n*/\r\nPromise.rejectDelay = function (reason, time) {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      reject(reason)\r\n    }, time)\r\n  })\r\n}\r\n\r\nexport default Promise","/* \r\n自定义消息订阅与发布\r\n*/\r\n\r\nconst PubSub = {}\r\n/* \r\n  {\r\n    add: {\r\n      token1: callback1, \r\n      token2: callback2\r\n    },\r\n    update: {\r\n      token3: callback3\r\n    }\r\n  }\r\n*/\r\nlet callbacksObj = {} // 保存所有回调的容器\r\nlet id = 0 // 用于生成token的标记\r\n\r\n// 1. 订阅消息\r\nPubSub.subscribe = function (msgName, callback) {\r\n\r\n  // 确定token\r\n  const token = 'token_' + ++id\r\n  // 取出当前消息对应的callbacks\r\n  const callbacks = callbacksObj[msgName]\r\n  if (!callbacks) {\r\n    callbacksObj[msgName] = {\r\n      [token]: callback\r\n    }\r\n  } else {\r\n    callbacks[token] = callback\r\n  }\r\n  // 返回token\r\n  return token\r\n}\r\n\r\n\r\n// 2. 发布异步的消息\r\nPubSub.publish = function (msgName, data) {\r\n  // 取出当前消息对应的callbacks\r\n  let callbacks = callbacksObj[msgName]\r\n  // 如果有值\r\n  if (callbacks) {\r\n    // callbacks = Object.assign({}, callbacks)\r\n    // 启动定时器, 异步执行所有的回调函数\r\n    setTimeout(() => {\r\n      Object.values(callbacks).forEach(callback => {\r\n        callback(data)\r\n      })\r\n    }, 0)\r\n  }\r\n}\r\n\r\n// 3. 发布同步的消息\r\nPubSub.publishSync = function (msgName, data) {\r\n  // 取出当前消息对应的callbacks\r\n  const callbacks = callbacksObj[msgName]\r\n  // 如果有值\r\n  if (callbacks) {\r\n    // 立即同步执行所有的回调函数\r\n    Object.values(callbacks).forEach(callback => {\r\n      callback(data)\r\n    })\r\n  }\r\n}\r\n\r\n/*\r\n4. 取消消息订阅\r\n  1). 没有传值, flag为undefined\r\n  2). 传入token字符串\r\n  3). msgName字符串\r\n*/\r\nPubSub.unsubscribe = function (flag) {\r\n  // 如果flag没有指定或者为null, 取消所有\r\n  if (flag === undefined) {\r\n    callbacksObj = {}\r\n  } else if (typeof flag === 'string') {\r\n    if (flag.indexOf('token_') === 0) { // flag是token\r\n      // 找到flag对应的callbacks\r\n      const callbacks = Object.values(callbacksObj).find(callbacks => callbacks.hasOwnProperty(flag))\r\n      // 如果存在, 删除对应的属性\r\n      if (callbacks) {\r\n        delete callbacks[flag]\r\n      }\r\n    } else { // flag是msgName\r\n      delete callbacksObj[flag]\r\n    }\r\n\r\n  } else {\r\n    throw new Error('如果传入参数, 必须是字符串类型')\r\n  }\r\n}\r\n\r\nexport default PubSub","/* \r\n希尔排序\r\n1. 计算出一系列增量值(折半法): \r\n    递减, 最后一个必须是1\r\n    distance = length\r\n    distance = Math.floor(distance/2)\r\n2. 以当前增量对数组进行分组, 分成多个小数组\r\n    对每个小数组进行插入排序\r\n    每个小数组排序是交替进行\r\n*/\r\nexport function shellSort (arr) {\r\n  const len = arr.length\r\n  let distance = len\r\n  while (distance>1) {\r\n    distance = Math.floor(distance/2)\r\n    console.log(distance)\r\n    for (let i = distance; i < len; i++) { // 遍历未排序的区域\r\n      const start = arr[i]\r\n      // 将start与左边的比较(从右向比)\r\n      let j = i -distance\r\n      while(j>=0 && arr[j]>start) {\r\n        arr[j+distance] = arr[j] // 向右移位\r\n        j = j - distance\r\n      }\r\n      arr[j+distance] = start\r\n    }\r\n  }\r\n\r\n  return arr\r\n}\r\n\r\nconsole.log(shellSort([5, 7, 9,3, 2, 6, 10, 1]))","class StorageFn {\r\n\tconstructor() {\r\n\t\tthis.ls = window.localStorage;\r\n\t\tthis.ss = window.sessionStorage;\r\n\t}\r\n\t/*-----------------cookie---------------------*/\r\n\t/*设置cookie*/\r\n\tsetCookie(name, value, day) {\r\n\t\tvar setting = arguments[0];\r\n\t\tif (Object.prototype.toString.call(setting).slice(8, -1) === 'Object') {\r\n\t\t\tfor (var i in setting) {\r\n\t\t\t\tvar oDate = new Date();\r\n\t\t\t\toDate.setDate(oDate.getDate() + day);\r\n\t\t\t\tdocument.cookie = i + '=' + setting[i] + ';expires=' + oDate;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar oDate = new Date();\r\n\t\t\toDate.setDate(oDate.getDate() + day);\r\n\t\t\tdocument.cookie = name + '=' + value + ';expires=' + oDate;\r\n\t\t}\r\n\t}\r\n\t/*获取cookie*/\r\n\tgetCookie(name) {\r\n\t\tvar arr = document.cookie.split('; ');\r\n\t\tfor (var i = 0; i < arr.length; i++) {\r\n\t\t\tvar arr2 = arr[i].split('=');\r\n\t\t\tif (arr2[0] == name) {\r\n\t\t\t\treturn arr2[1];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn '';\r\n\t}\r\n\t/*删除cookie*/\r\n\tremoveCookie(name) {\r\n\t\tthis.setCookie(name, 1, -1);\r\n\t}\r\n\t/*-----------------localStorage---------------------*/\r\n\t/*设置localStorage*/\r\n\tsetLocal(key, val) {\r\n\t\tvar setting = arguments[0];\r\n\t\tif (Object.prototype.toString.call(setting).slice(8, -1) === 'Object') {\r\n\t\t\tfor (var i in setting) {\r\n\t\t\t\tthis.ls.setItem(i, JSON.stringify(setting[i]))\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.ls.setItem(key, JSON.stringify(val))\r\n\t\t}\r\n\t}\r\n\t/*获取localStorage*/\r\n\tgetLocal(key) {\r\n\t\tif (key) return JSON.parse(this.ls.getItem(key))\r\n\t\treturn null;\r\n\t}\r\n\t/*移除localStorage*/\r\n\tremoveLocal(key) {\r\n\t\tthis.ls.removeItem(key)\r\n\t}\r\n\t/*移除所有localStorage*/\r\n\tclearLocal() {\r\n\t\tthis.ls.clear()\r\n\t}\r\n\t/*-----------------sessionStorage---------------------*/\r\n\t/*设置sessionStorage*/\r\n\tsetSession(key, val) {\r\n\t\tvar setting = arguments[0];\r\n\t\tif (Object.prototype.toString.call(setting).slice(8, -1) === 'Object') {\r\n\t\t\tfor (var i in setting) {\r\n\t\t\t\tthis.ss.setItem(i, JSON.stringify(setting[i]))\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.ss.setItem(key, JSON.stringify(val))\r\n\t\t}\r\n\t}\r\n\t/*获取sessionStorage*/\r\n\tgetSession(key) {\r\n\t\tif (key) return JSON.parse(this.ss.getItem(key))\r\n\t\treturn null;\r\n\t}\r\n\t/*移除sessionStorage*/\r\n\tremoveSession(key) {\r\n\t\tthis.ss.removeItem(key)\r\n\t}\r\n\t/*移除所有sessionStorage*/\r\n\tclearSession() {\r\n\t\tthis.ss.clear()\r\n\t}\r\n}\r\nlet storage = new StorageFn();\r\nexport default storage","/* \r\n自定义一个优先级队列\r\n*/\r\n\r\nfunction PriorityQueue() {\r\n\r\n  // 用于保存元素数据的数组\r\n  const arr = [] // 保存的元素结构: {data, priority}\r\n\r\n\r\n  /* 队列每个元素的类型 */\r\n  function QueueElement(data, priority) {\r\n    this.data = data\r\n    this.priority = priority\r\n  }\r\n  \r\n  // 入队列: enqueue()\r\n  this.enqueue = function (data, priority) {\r\n    // 要求priority在[0, 100]之间, 否则抛出异常\r\n    if (priority<0 || priority>100) {\r\n      throw new Error('优先级值必须在0到100之间')\r\n    }\r\n    // 创建一个新的元素\r\n    const element = new QueueElement(data, priority)\r\n\r\n    // 将element添加到内部的arr中\r\n    // 如果当前是空的, 直接添加\r\n    if (arr.length===0) {\r\n      arr.push(element)\r\n    } else { // 将当前element插入到arr中的一个合适: 在priority值大于当前值的左边\r\n      for (let index = 0; index < arr.length; index++) {\r\n        if (arr[index].priority > priority) {\r\n          arr.splice(index, 0, element)\r\n          return\r\n        }\r\n      }\r\n      // 当前要添加的priority是最大的\r\n      arr.push(element)\r\n    }\r\n  }\r\n\r\n  // 出队列: dequeue()\r\n  this.dequeue = function () {\r\n    return arr.shift()\r\n  }\r\n\r\n  // 查看队头: front()\r\n  this.front = function () {\r\n    return arr[0]\r\n  }\r\n  // 查看元素的个数: size()\r\n  this.size = function () {\r\n    return arr.length\r\n  }\r\n  // 判断队列是否为空: isEmpty()\r\n  this.isEmpty = function () {\r\n    return arr.length===0\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default PriorityQueue","/* \r\n自定义队列类型\r\n使用数组封装\r\n    入队列: enqueue()\r\n    出队列: dequeue()\r\n    查看队头: front()\r\n    查看元素的个数: size()\r\n    判断队列是否为空: isEmpty()\r\n*/\r\nfunction Queue() {\r\n\r\n  // 用于保存元素数据的数组\r\n  const arr = []\r\n\r\n  \r\n  // 入队列: enqueue()\r\n  this.enqueue = function (element) {\r\n    arr.push(element)\r\n  }\r\n\r\n  // 出队列: dequeue()\r\n  this.dequeue = function () {\r\n    return arr.shift()\r\n  }\r\n\r\n  // 查看队头: front()\r\n  this.front = function () {\r\n    return arr[0]\r\n  }\r\n  // 查看元素的个数: size()\r\n  this.size = function () {\r\n    return arr.length\r\n  }\r\n  // 判断队列是否为空: isEmpty()\r\n  this.isEmpty = function () {\r\n    return arr.length===0\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Queue","/* \r\n自定义栈类型 Stack\r\n*/\r\n\r\nfunction Stack() {\r\n\r\n  // 用于保存元素数据的数组\r\n  let arr = [] // 不想让外部直接通过stack.arr得到数组\r\n\r\n  /* \r\n    1. 如果不判断, 问题是创建多个stack总是使用最后创建的arr\r\n    2. 如果有判断, 问题是创建多个stack总是使用第一个创建的arr\r\n      原型对象上的方法不要重新定义\r\n  */\r\n  // if (Stack.prototype.push) return \r\n  \r\n  // 压栈: push()\r\n  // Stack.prototype.push = function (element) {\r\n  this.push = function (element) {\r\n    arr.push(element)\r\n  }\r\n\r\n  // 出栈: pop()\r\n  this.pop = function () {\r\n    // return arr.splice(arr.length-1, 1)\r\n    return arr.pop()\r\n  }\r\n\r\n  // 查看栈顶: peek()\r\n  this.peek = function () {\r\n    return arr[arr.length - 1]\r\n  }\r\n  // 栈中元素个数: size()\r\n  this.size = function () {\r\n    return arr.length\r\n  }\r\n  // 是否是空栈: isEmpty()\r\n  this.isEmpty = function () {\r\n    return arr.length===0\r\n  }\r\n\r\n  // 清栈\r\n  this.clear = function () {\r\n    arr = []\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Stack","/**\r\n * \r\n * @param {number|string} num 需要处理的数字\r\n * @param {number} n 保留位数,默认1\r\n * @param {string} flag = 'ceil' || 'floor' 向上或向下保留，默认四舍五入\r\n * @returns {string}\r\n */\r\nexport function formatFloat(num, n = 1, flag) {\r\n\tvar f = parseFloat(num);\r\n\tif (isNaN(f)) {\r\n\t\treturn false;\r\n\t}\r\n\tif (flag === 'ceil') {\r\n\t\tf = Math.ceil(num * Math.pow(10, n)) / Math.pow(10, n); // n 幂\r\n\t} else if (flag === 'floor') {\r\n\t\tf = Math.floor(num * Math.pow(10, n)) / Math.pow(10, n); // n 幂\r\n\t} else {\r\n\t\tf = Math.round(num * Math.pow(10, n)) / Math.pow(10, n); // n 幂\r\n\t}\r\n\tvar s = f.toString();\r\n\tvar rs = s.indexOf('.');\r\n\t//判定如果是整数，增加小数点再补0\r\n\tif (rs < 0) {\r\n\t\trs = s.length;\r\n\t\ts += '.';\r\n\t}\r\n\twhile (s.length <= rs + n) {\r\n\t\ts += '0';\r\n\t}\r\n\treturn s;\r\n}\r\n\r\n/**\r\n * \r\n * @param {amount} amount 金额\r\n * @returns {string}\r\n */\r\nexport function formatAmount(amount) {\r\n\tif (isNaN(amount)) {\r\n\t\treturn false;\r\n\t}\r\n\tamounts = Math.abs(amount)\r\n\tamounts = '' + Number(amounts).toFixed(2);\r\n\tvar x = amounts.split('.');\r\n\tvar x1 = x[0];\r\n\tvar x2 = '.' + x[1];\r\n\tvar rgx = /(\\d+)(\\d{3})/;\r\n\twhile (rgx.test(x1)) {\r\n\t\tx1 = x1.replace(rgx, '$1' + ',' + '$2');\r\n\t}\r\n\tif (amount > 0) {\r\n\t\treturn x1 + x2;\r\n\t} else {\r\n\t\treturn '-' + x1 + x2;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {string} a \r\n * @param {string} b \r\n * @returns \r\n */\r\nexport function sumBigNumber(a, b) {\r\n\tvar res = '',\r\n\t\ttemp = 0;\r\n\ta = a.split('');\r\n\tb = b.split('');\r\n\twhile (a.length || b.length || temp) {\r\n\t\ttemp += ~~a.pop() + ~~b.pop();\r\n\t\tres = (temp % 10) + res;\r\n\t\ttemp = temp > 9;\r\n\t}\r\n\treturn res.replace(/^0+/, '');\r\n}\r\n\r\n/*随机数范围*/\r\nexport function random(min, max) {\r\n\tif (arguments.length === 2) {\r\n\t\treturn Math.floor(min + Math.random() * ((max + 1) - min))\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n/*将阿拉伯数字翻译成中文的大写数字*/\r\nexport function numToChinese(num) {\r\n\tvar AA = new Array(\"零\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\", \"七\", \"八\", \"九\", \"十\");\r\n\tvar BB = new Array(\"\", \"十\", \"百\", \"仟\", \"萬\", \"億\", \"点\", \"\");\r\n\tvar a = (\"\" + num).replace(/(^0*)/g, \"\").split(\".\"),\r\n\t\tk = 0,\r\n\t\tre = \"\";\r\n\tfor (var i = a[0].length - 1; i >= 0; i--) {\r\n\t\tswitch (k) {\r\n\t\t\tcase 0:\r\n\t\t\t\tre = BB[7] + re;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\tif (!new RegExp(\"0{4}//d{\" + (a[0].length - i - 1) + \"}$\")\r\n\t\t\t\t\t.test(a[0]))\r\n\t\t\t\t\tre = BB[4] + re;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 8:\r\n\t\t\t\tre = BB[5] + re;\r\n\t\t\t\tBB[7] = BB[5];\r\n\t\t\t\tk = 0;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tif (k % 4 == 2 && a[0].charAt(i + 2) != 0 && a[0].charAt(i + 1) == 0)\r\n\t\t\tre = AA[0] + re;\r\n\t\tif (a[0].charAt(i) != 0)\r\n\t\t\tre = AA[a[0].charAt(i)] + BB[k % 4] + re;\r\n\t\tk++;\r\n\t}\r\n\tif (a.length > 1) // 加上小数部分(如果有小数部分)\r\n\t{\r\n\t\tre += BB[6];\r\n\t\tfor (var i = 0; i < a[1].length; i++)\r\n\t\t\tre += AA[a[1].charAt(i)];\r\n\t}\r\n\tif (re == '一十')\r\n\t\tre = \"十\";\r\n\tif (re.match(/^一/) && re.length == 3)\r\n\t\tre = re.replace(\"一\", \"\");\r\n\treturn re;\r\n}\r\n\r\n\r\n/*将数字转换为大写金额*/\r\nexport function amountToChinese(Num) {\r\n\t//判断如果传递进来的不是字符的话转换为字符\r\n\tif (typeof Num == \"number\") {\r\n\t\tNum = new String(Num);\r\n\t};\r\n\tNum = Num.replace(/,/g, \"\") //替换tomoney()中的“,”\r\n\tNum = Num.replace(/ /g, \"\") //替换tomoney()中的空格\r\n\tNum = Num.replace(/￥/g, \"\") //替换掉可能出现的￥字符\r\n\tif (isNaN(Num)) { //验证输入的字符是否为数字\r\n\t\t//alert(\"请检查小写金额是否正确\");\r\n\t\treturn \"\";\r\n\t};\r\n\t//字符处理完毕后开始转换，采用前后两部分分别转换\r\n\tvar part = String(Num).split(\".\");\r\n\tvar newchar = \"\";\r\n\t//小数点前进行转化\r\n\tfor (var i = part[0].length - 1; i >= 0; i--) {\r\n\t\tif (part[0].length > 10) {\r\n\t\t\treturn \"\";\r\n\t\t\t//若数量超过拾亿单位，提示\r\n\t\t}\r\n\t\tvar tmpnewchar = \"\"\r\n\t\tvar perchar = part[0].charAt(i);\r\n\t\tswitch (perchar) {\r\n\t\t\tcase \"0\":\r\n\t\t\t\ttmpnewchar = \"零\" + tmpnewchar;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1\":\r\n\t\t\t\ttmpnewchar = \"壹\" + tmpnewchar;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2\":\r\n\t\t\t\ttmpnewchar = \"贰\" + tmpnewchar;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"3\":\r\n\t\t\t\ttmpnewchar = \"叁\" + tmpnewchar;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"4\":\r\n\t\t\t\ttmpnewchar = \"肆\" + tmpnewchar;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"5\":\r\n\t\t\t\ttmpnewchar = \"伍\" + tmpnewchar;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"6\":\r\n\t\t\t\ttmpnewchar = \"陆\" + tmpnewchar;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"7\":\r\n\t\t\t\ttmpnewchar = \"柒\" + tmpnewchar;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"8\":\r\n\t\t\t\ttmpnewchar = \"捌\" + tmpnewchar;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"9\":\r\n\t\t\t\ttmpnewchar = \"玖\" + tmpnewchar;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tswitch (part[0].length - i - 1) {\r\n\t\t\tcase 0:\r\n\t\t\t\ttmpnewchar = tmpnewchar + \"元\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tif (perchar != 0) tmpnewchar = tmpnewchar + \"拾\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (perchar != 0) tmpnewchar = tmpnewchar + \"佰\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tif (perchar != 0) tmpnewchar = tmpnewchar + \"仟\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\ttmpnewchar = tmpnewchar + \"万\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5:\r\n\t\t\t\tif (perchar != 0) tmpnewchar = tmpnewchar + \"拾\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase 6:\r\n\t\t\t\tif (perchar != 0) tmpnewchar = tmpnewchar + \"佰\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase 7:\r\n\t\t\t\tif (perchar != 0) tmpnewchar = tmpnewchar + \"仟\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase 8:\r\n\t\t\t\ttmpnewchar = tmpnewchar + \"亿\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase 9:\r\n\t\t\t\ttmpnewchar = tmpnewchar + \"拾\";\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tvar newchar = tmpnewchar + newchar;\r\n\t}\r\n\t//小数点之后进行转化\r\n\tif (Num.indexOf(\".\") != -1) {\r\n\t\tif (part[1].length > 2) {\r\n\t\t\t// alert(\"小数点之后只能保留两位,系统将自动截断\");\r\n\t\t\tpart[1] = part[1].substr(0, 2)\r\n\t\t}\r\n\t\tfor (i = 0; i < part[1].length; i++) {\r\n\t\t\ttmpnewchar = \"\"\r\n\t\t\tperchar = part[1].charAt(i)\r\n\t\t\tswitch (perchar) {\r\n\t\t\t\tcase \"0\":\r\n\t\t\t\t\ttmpnewchar = \"零\" + tmpnewchar;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"1\":\r\n\t\t\t\t\ttmpnewchar = \"壹\" + tmpnewchar;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"2\":\r\n\t\t\t\t\ttmpnewchar = \"贰\" + tmpnewchar;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"3\":\r\n\t\t\t\t\ttmpnewchar = \"叁\" + tmpnewchar;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"4\":\r\n\t\t\t\t\ttmpnewchar = \"肆\" + tmpnewchar;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"5\":\r\n\t\t\t\t\ttmpnewchar = \"伍\" + tmpnewchar;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"6\":\r\n\t\t\t\t\ttmpnewchar = \"陆\" + tmpnewchar;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"7\":\r\n\t\t\t\t\ttmpnewchar = \"柒\" + tmpnewchar;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"8\":\r\n\t\t\t\t\ttmpnewchar = \"捌\" + tmpnewchar;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"9\":\r\n\t\t\t\t\ttmpnewchar = \"玖\" + tmpnewchar;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (i == 0) tmpnewchar = tmpnewchar + \"角\";\r\n\t\t\tif (i == 1) tmpnewchar = tmpnewchar + \"分\";\r\n\t\t\tnewchar = newchar + tmpnewchar;\r\n\t\t}\r\n\t}\r\n\t//替换所有无用汉字\r\n\twhile (newchar.search(\"零零\") != -1)\r\n\t\tnewchar = newchar.replace(\"零零\", \"零\");\r\n\tnewchar = newchar.replace(\"零亿\", \"亿\");\r\n\tnewchar = newchar.replace(\"亿万\", \"亿\");\r\n\tnewchar = newchar.replace(\"零万\", \"万\");\r\n\tnewchar = newchar.replace(\"零元\", \"元\");\r\n\tnewchar = newchar.replace(\"零角\", \"\");\r\n\tnewchar = newchar.replace(\"零分\", \"\");\r\n\tif (newchar.charAt(newchar.length - 1) == \"元\") {\r\n\t\tnewchar = newchar + \"整\"\r\n\t}\r\n\treturn newchar;\r\n}\r\n","export function apply (fn, obj, args) {\r\n  // 处理obj是undefined或者null的情况\r\n  if (obj===undefined || obj===null) {\r\n    obj = window\r\n  }\r\n\r\n  // 给obj添加一个方法: tempFn: this\r\n  obj.tempFn = fn\r\n  // 调用obj的tempFn方法, 传入rags参数, 得到返回值\r\n  const result = obj.tempFn(...args)\r\n  // 删除obj上的temFn\r\n  delete obj.tempFn\r\n  // 返回方法的返回值\r\n  return result\r\n\r\n  // return call(fn, obj, ...args)\r\n}\r\n\r\n","import call from './call'\r\n\r\nexport function bind (fn,obj, ...args) {\r\n  // 返回一个新函数\r\n  return (...args2) => {\r\n    // 调用原来函数, 指定this为obj, 参数列表由args和args2依次组成\r\n    return call(fn, obj, ...args, ...args2)\r\n  }\r\n}\r\n","\r\n/**\r\n * 获取浏览器类型\r\n * @returns {string}\r\n */\r\nexport function browserType() {\r\n\tvar userAgent = navigator.userAgent; //取得浏览器的userAgent字符串\r\n\tvar isOpera = userAgent.indexOf(\"Opera\") > -1; //判断是否Opera浏览器\r\n\tvar isIE = userAgent.indexOf(\"compatible\") > -1 && userAgent.indexOf(\"MSIE\") > -1 && !isOpera; //判断是否IE浏览器\r\n\tvar isIE11 = userAgent.indexOf('Trident') > -1 && userAgent.indexOf(\"rv:11.0\") > -1;\r\n\tvar isEdge = userAgent.indexOf(\"Edge\") > -1 && !isIE; //判断是否IE的Edge浏览器 \r\n\tvar isFF = userAgent.indexOf(\"Firefox\") > -1; //判断是否Firefox浏览器\r\n\tvar isSafari = userAgent.indexOf(\"Safari\") > -1 && userAgent.indexOf(\"Chrome\") == -1; //判断是否Safari浏览器\r\n\tvar isChrome = userAgent.indexOf(\"Chrome\") > -1 && userAgent.indexOf(\"Safari\") > -1; //判断Chrome浏览器\r\n\tif (isIE) {\r\n\t\tvar reIE = new RegExp(\"MSIE (\\\\d+\\\\.\\\\d+);\");\r\n\t\treIE.test(userAgent);\r\n\t\tvar fIEVersion = parseFloat(RegExp[\"$1\"]);\r\n\t\tif (fIEVersion == 7) return \"IE7\"\r\n\t\telse if (fIEVersion == 8) return \"IE8\";\r\n\t\telse if (fIEVersion == 9) return \"IE9\";\r\n\t\telse if (fIEVersion == 10) return \"IE10\";\r\n\t\telse return \"IE7以下\"//IE版本过低\r\n\t}\r\n\tif (isIE11) return 'IE11';\r\n\tif (isEdge) return \"Edge\";\r\n\tif (isFF) return \"FF\";\r\n\tif (isOpera) return \"Opera\";\r\n\tif (isSafari) return \"Safari\";\r\n\tif (isChrome) return \"Chrome\";\r\n}","/* \r\n3个基本的排序算法\r\n*/\r\n\r\nexport function bubbleSort(arr) {\r\n  for (let i = arr.length-1; i >0; i--) { //需要在 [0, i]\r\n    for (let j = 0; j < i; j++) { // 依次拿出相邻的2个进行比较\r\n      if (arr[j] > arr[j+1]) { // 需要交换位置\r\n        // let temp = arr[j]\r\n        // arr[j] = arr[j+1]\r\n        // arr[j+1] = temp\r\n        [arr[j+1], arr[j]] = [arr[j], arr[j+1]]\r\n      }\r\n    }\r\n  }\r\n  return arr\r\n}\r\n\r\nexport function selectSort(arr) {\r\n  const len = arr.length\r\n  for (let i = 0; i < len - 1; i++) { // 遍历未排序的区域\r\n    // 将最小值的下标暂定为i\r\n    let minIndex = i\r\n    // 依次与它右侧元素比较\r\n    for (let j = i+1; j < len; j++) {\r\n      if (arr[minIndex] > arr[j]) {\r\n        // 找到一个更小的值, 更新一下最小值的下标\r\n        minIndex = j\r\n      }\r\n    }\r\n    // 一旦minIndex有变化(发现最小值的下标不是i)\r\n    if (minIndex!==i) {\r\n      [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]]\r\n    }\r\n  }\r\n\r\n  return arr\r\n}\r\n\r\nexport function insertSort(arr) {\r\n  const len = arr.length\r\n  // 假设第一个元素已排序了\r\n  for (let i = 1; i < len; i++) { // 遍历未排序的区域\r\n    const start = arr[i]\r\n    // 将start与左边的比较(从右向比)\r\n    let j = i -1\r\n    while(j>=0 && arr[j]>start) {\r\n      arr[j+1] = arr[j] // 向右移位\r\n      j--\r\n    }\r\n    arr[j+1] = start\r\n  }\r\n\r\n  return arr\r\n}\r\n","/* \r\n将数组拆分成多个 size 长度的区块，每个区块组成小数组,整体组成一个二维数组\r\n*/\r\n\r\nexport function chunk(array, size=1) {\r\n  const bigArr = []\r\n  let smallArr = []\r\n  // 如果是空数组, 直接返回空数组\r\n  if (array.length===0) {\r\n    return bigArr\r\n  }\r\n  // 处理size\r\n  if (size<1) {\r\n    size = 1\r\n  } /* else if (size>array.length) {\r\n    size = array.length\r\n  } */\r\n\r\n  array.forEach(item => {\r\n\r\n    // 将小数组bigArr中(只能放一次)\r\n    if (smallArr.length===0) {\r\n      bigArr.push(smallArr)\r\n    }\r\n\r\n    // 将元素添加到小数组\r\n    smallArr.push(item)\r\n\r\n    // 限制smallArr的最大长度是size\r\n    if (smallArr.length===size) {\r\n      smallArr = []\r\n    }\r\n  })\r\n\r\n  return bigArr\r\n}","/**\r\n * 浅拷贝\r\n * @param {*} target \r\n * @returns \r\n */\r\nexport function clone (target) {\r\n  if (target instanceof Array) {\r\n    // return [...target]\r\n    // return target.slice()\r\n    // return [].concat(target)\r\n    // return Array.from(target)\r\n    // return target.filter(value => true)\r\n    // return target.map(item => item)\r\n    return target.reduce((pre, item) => {\r\n      pre.push(item)\r\n      return pre\r\n    }, [])\r\n  } else if (target!==null && typeof target==='object') {\r\n    return {...target}\r\n  } else {// 如果不是数组或对象, 直接返回\r\n    return target\r\n  }\r\n}\r\n","/* \r\ncompact(array): 返回数组中所有真值元素组成的新数组\r\n*/\r\nimport {filter} from './declares'\r\nexport default function compact (array) {\r\n  return filter(array, item => item)\r\n}","import {compareObj} from '../object/compareObj';\r\nimport {type} from '../function/type';\r\n\r\n/**\r\n * 判断俩个数组是否相等，元素位置也必须相等\r\n * @param {Array} arr1 \r\n * @param {Array} arr2 \r\n * @returns {Boolean}\r\n */\r\nexport function compareArr(arr1, arr2) {//判断2个数组是否相等\r\n\tif(type(arr1)!='array' || type(arr2) != 'array')return '参数错误';\r\n\tif (arr1 === arr2) {//如果2个数组对应的指针相同，那么肯定相等，同时也对比一下类型\r\n\t\treturn true;\r\n\t} else {\r\n\t\tif (arr1.length != arr2.length) {\r\n\t\t\treturn false;\r\n\t\t} else {//长度相同\r\n\t\t\tfor (let i in arr1) {//循环遍历对比每个位置的元素\r\n\t\t\t\tif(type(arr1[i]) == type(arr2[i])){\r\n\t\t\t\t\tif(('function','object').includes(type(arr1[i])) ){\r\n\t\t\t\t\t\tif(!compareObj(arr1[i],arr2[i])){\r\n\t\t\t\t\t\t\treturn false\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else if(type(arr1[i]) == 'array'){\r\n\t\t\t\t\t\tcompareArr(arr1[i], arr2[i])\r\n\t\t\t\t\t} else if(arr1[i] != arr2[i]){\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}//for循环完成，没有出现不相等的情况，那么2个数组相等\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n}","/* \r\n用来返回防抖函数的工具函数\r\n*/\r\nexport function debounce(callback, delay) {\r\n  return function (event) {\r\n\r\n    // 如果上次事件还没有真正处理, 取消它\r\n    // if (callback.timeoutId) { // 会查找原型链\r\n    if (callback.hasOwnProperty('timeoutId')) { // 不会查找原型链\r\n      // 清除\r\n      clearTimeout(callback.timeoutId)\r\n    }\r\n\r\n    // 发事件发生指定事件后才调用处理事件的回调函数\r\n    // 启动定时器, 只是准备真正处理\r\n    callback.timeoutId = setTimeout(() => {\r\n      // 正在处理事件\r\n      callback.call(this, event)\r\n      // 删除准备处理的标记\r\n      delete callback.timeoutId\r\n    }, delay)\r\n  }\r\n}","/* \r\n实现深拷贝\r\n    1). 大众乞丐版\r\n        问题1: 函数属性会丢失\r\n        问题2: 循环引用会出错\r\n\r\n    2). 面试基础版本\r\n        解决问题1: 函数属性还没丢失\r\n        问题2: 循环引用会出错\r\n\r\n    3). 面试加强版本\r\n        解决问题2: 循环引用正常\r\n    4). 面试加强版本2(优化遍历性能)\r\n        数组: while | for | forEach() 优于 for-in | keys()&forEach() \r\n        对象: for-in 与 keys()&forEach() 差不多\r\n*/\r\n\r\nexport function deepClone1 (target) {\r\n  return JSON.parse(JSON.stringify(target))\r\n}\r\n\r\n/* \r\n解决了: 函数属性会丢失\r\n问题: 循环引用会出错\r\n*/\r\nexport function deepClone2 (target) {\r\n  // 被处理的目标是数组/对象\r\n  if (target instanceof Array || (target!==null && typeof target==='object')) {\r\n    const cloneTarget = target instanceof Array ? [] : {}\r\n    for (const key in target) {\r\n      if (target.hasOwnProperty(key)) {\r\n        cloneTarget[key] = deepClone2(target[key])  // 对属性值进行递归处理\r\n      }\r\n    }\r\n    return cloneTarget\r\n  } else {\r\n    return target\r\n  }\r\n}\r\n\r\n/* \r\n解决了: 函数属性会丢失\r\n解决: 循环引用会出错    \r\n解决思路:\r\n    目标: 同一个对旬/数组只能被克隆1次\r\n    创建克隆对象前:　如果克隆对象已经存在, 直接返回\r\n    创建克隆对象后: 保存克隆对象 \r\n    缓存容器结构: Map  key: target, value: cloneTaget\r\n*/\r\nexport function deepClone3 (target, map=new Map()) {\r\n  // 被处理的目标是数组/对象\r\n  if (target instanceof Array || (target!==null && typeof target==='object')) {\r\n    // map中存在对应的克隆对象, 直接将其返回\r\n    let cloneTarget = map.get(target)\r\n    if (cloneTarget) {\r\n      return cloneTarget // 不要对同一个对象进行多次clone\r\n    }\r\n    // 创建克隆对象\r\n    cloneTarget = target instanceof Array ? [] : {}\r\n    // 保存到map容器\r\n    map.set(target, cloneTarget)\r\n\r\n    for (const key in target) {\r\n      if (target.hasOwnProperty(key)) {\r\n        cloneTarget[key] = deepClone3(target[key], map)  // 对属性值进行递归处理\r\n      }\r\n    }\r\n    return cloneTarget\r\n  } else {\r\n    return target\r\n  }\r\n}\r\n\r\n/* \r\n优化数组的遍历: 不用for...in, 而用forEach\r\n*/\r\nexport function deepClone (target, map=new Map()) {\r\n  // 被处理的目标是数组/对象\r\n  if (target instanceof Array || (target!==null && typeof target==='object')) {\r\n    // map中存在对应的克隆对象, 直接将其返回\r\n    let cloneTarget = map.get(target)\r\n    if (cloneTarget) {\r\n      return cloneTarget // 不要对同一个对象进行多次clone\r\n    }\r\n    // 创建克隆对象\r\n    if (target instanceof Array) {\r\n      cloneTarget = []\r\n      // 保存到map容器\r\n      map.set(target, cloneTarget)\r\n      // 向数组添加元素\r\n      target.forEach((item, index) => {\r\n        cloneTarget[index] = deepClone(item, map)\r\n      })\r\n    } else {\r\n      cloneTarget = {}\r\n      // 保存到map容器\r\n      map.set(target, cloneTarget)\r\n      // 向对象添加属性\r\n      for (const key in target) {\r\n        if (target.hasOwnProperty(key)) {\r\n          cloneTarget[key] = deepClone(target[key], map)  // 对属性值进行递归处理\r\n        }\r\n      }\r\n    }\r\n    \r\n    return cloneTarget\r\n  } else {\r\n    return target\r\n  }\r\n}","\r\n/**\r\n * 数组平铺\r\n * @param {Array} arr \r\n * @returns \r\n */\r\nexport function deepFlatten(arr) {\r\n  if(!Array.isArray(arr))return [];\r\n  let flatten = (arr)=> [].concat(...arr);\r\n  return flatten(arr.map(x=>Array.isArray(x)? this.deepFlatten(x): x));\r\n}","/* \r\ndifference(arr1, arr2): 得到当前数组中所有不在arr中的元素组成的数组(不改变原数组)\r\n        如: difference([1,3,5,7], [5, 8])  ==> [1, 3, 7]\r\n*/\r\nimport {filter} from './declares'\r\n\r\nexport function difference(arr1, arr2) {\r\n\r\n  // 处理特别情况\r\n  if (arr1.length===0) {\r\n    return []\r\n  } else if (arr2.length===0) {\r\n    return [...arr1]\r\n  }\r\n  \r\n  // 对数组进行过滤\r\n  return filter(arr1, item => arr2.indexOf(item)===-1)\r\n}\r\n\r\nexport function differences(arr1, ...arrays) {\r\n\r\n  // 处理特别情况\r\n  if (arr1.length===0) {\r\n    return []\r\n  } else if (arrays.length===0) {\r\n    return [...arr1]\r\n  }\r\n  \r\n  // 对数组进行过滤\r\n  return filter(arr1, item => {\r\n    let result = true // 假设当前元素在后面的所有数组都不存在\r\n    /* arrays.forEach(array => {\r\n      const index = array.indexOf(item)\r\n      if (index!==-1) {\r\n        result = false\r\n      }\r\n    }) */\r\n    for (let index = 0; index < arrays.length; index++) {\r\n      const array = arrays[index];\r\n      if (array.indexOf(item)!==-1) {\r\n        result = false\r\n        break // 结束当前for循环\r\n      }\r\n    }\r\n    return result\r\n  })\r\n}","/* \r\n1. drop(array, count): \r\n    得到数组过滤掉左边count个后剩余元素组成的数组\r\n    说明: 不改变当前数组, count默认是1\r\n    如: drop([1,3,5,7], 2) ===> [5, 7]\r\n2. dropRight(array, count): \r\n    得到数组过滤掉右边count个后剩余元素组成的数组\r\n    说明: 不改变数组, count默认是1\r\n    如: dropRight([1,3,5,7], 2) ===> [1, 3]   \r\n*/\r\n\r\nexport function drop(array, count=1) {\r\n  if (array.length==0) {\r\n    return []\r\n  }\r\n  if (count<1) {\r\n    count = 1\r\n  }\r\n  \r\n  return array.filter((item, index) => index>=count)\r\n}\r\n\r\nexport function dropRight(array, count=1) {\r\n  if (array.length==0) {\r\n    return []\r\n  }\r\n  if (count<1) {\r\n    count = 1\r\n  }\r\n  \r\n  return array.filter((item, index) => index<array.length-count)\r\n}","\r\n/**\r\n * \r\n * @param {Array} arrs 树形数据\r\n * @param {string} childs 树形数据子数据的属性名,常用'children'\r\n * @param {Array} attrArr 需要提取的公共属性数组\r\n * @returns \r\n */\r\nexport function extractTree(arrs,childs,attrArr){\r\n  let list = [];\r\n  const getObj = (arr)=>{\r\n    arr.forEach(function(row){\r\n      let obj = {};\r\n      attrArr.forEach(item=>{\r\n        obj[item] = row[item]\r\n      });\r\n      list.push(obj);\r\n      if(row[childs]){\r\n        getObj(row[childs]);\r\n      }\r\n    })\r\n    return list;\r\n  }\r\n  return getObj(arrs);\r\n}\r\n\r\n/**\r\n * \r\n * @param {Array} data \r\n * @param {string} pid 子树找父级的标识\r\n * @param {string} child 自定义子树字段名称\r\n * @returns \r\n */\r\nexport function makeTree(data,pid,child){\r\n  let parents = data.filter(p => p[pid] === 0),\r\n      children = data.filter(c => c[pid] !== 0);\r\n  dataToTree(parents, children);\r\n  return parents;\r\n\r\n  function dataToTree(parents, children){\r\n    parents.map(p => {\r\n      children.map((c, i) => {\r\n        if(c[pid] === p.id){\r\n          let _children = JSON.parse(JSON.stringify(children));\r\n          _children.splice(i, 1);\r\n          dataToTree([c], _children);\r\n          if(p[child]){\r\n            p[child].push(c);\r\n          }else{\r\n            p[child] = [c];\r\n          }\r\n        }\r\n      })\r\n    })\r\n  }\r\n}\r\n","/* \r\n1. 理解: \r\n    取出嵌套数组(多维)中的所有元素放到一个新数组(一维)中\r\n    如: [1, [3, [2, 4]]]  ==>  [1, 3, 2, 4]\r\n2. 实现:\r\n    方法一: 递归 + reduce() + concat()\r\n    方法二: ... + some() + concat()\r\n*/\r\nimport { reduce, some } from './declares'\r\nimport { concat } from './concat'\r\n\r\n/* \r\n方法一: 递归 + reduce() + concat()\r\n*/\r\nexport function flatten1 (array) {\r\n  return reduce(array, (pre, item) => {\r\n    if (!Array.isArray(item)) {\r\n      pre.push(item)\r\n    } else {\r\n      pre = concat(pre, flatten1(item))\r\n    }\r\n    return pre\r\n  }, [])\r\n} // [1, 3, [2, 4]]\r\n\r\n/* \r\n[1, [3, [2, 4]]]\r\n\r\n[1]\r\n\r\n[3]\r\n\r\n[2, 4]\r\n\r\n[1, 3, 2, 4]\r\n*/\r\n\r\n/* \r\n方法二: ... + some() + concat()\r\n*/\r\nexport function flatten2 (array) {\r\n  let arr = concat([], ...array)\r\n  while(some(arr, item => Array.isArray(item))) { // arr中有元素是数组\r\n    arr = concat([], ...arr)\r\n  }\r\n\r\n  return arr\r\n} \r\n","/* \r\n merge(arr1, arr2): 将arr2与arr1的元素进行合并组成一个新的数组(不改变原数组)\r\n        如: merge([1,3,5,7,5], [1, 5, 8]) ==> [1, 3, 5, 7, 5, 8]\r\n*/\r\nexport function mergeArray(array, ...arrays) {\r\n  const result = [...array]\r\n\r\n  if (arrays.length===0) {\r\n    return result\r\n  }\r\n\r\n  arrays.forEach(itemArr => {\r\n    itemArr.forEach(item => {\r\n      if (result.indexOf(item)===-1) {\r\n        result.push(item)\r\n      }\r\n    })\r\n  })\r\n\r\n  return result\r\n}","/* \r\n  语法: object mergeObject(...objs)\r\n    功能: 合并多个对象, 返回一个合并后对象(不改变原对象)\r\n    合并前:\r\n        { a: [{ x: 2 }, { y: 4 }], b: 1}\r\n        { a: { z: 3}, b: [2, 3], c: 'foo'}\r\n    合并后: \r\n        { a: [ { x: 2 }, { y: 4 }, { z: 3 } ], b: [ 1, 2, 3 ], c: 'foo' }\r\n*/\r\nimport { concat } from '../array/concat'\r\nexport function mergeObject(...objs) {\r\n  const result = {}\r\n\r\n  objs.forEach(obj => {\r\n    Object.keys(obj).forEach(key => {\r\n      const value = obj[key]\r\n      // result中没有key属性\r\n      if (!result.hasOwnProperty(key)) {\r\n        result[key] = value\r\n      } else { // result中有key属性\r\n        // 对原值与value进行合并生成新的数组\r\n        result[key] = concat([], result[key], value)\r\n      }\r\n    })\r\n  })\r\n\r\n  return result\r\n}","/* \r\n2. 自定义instanceof工具函数\r\n    语法: myInstanceOf(obj, Type)\r\n    功能: 判断obj是否是Type类型的实例\r\n    实现: Type的原型对象是否是obj的原型链上的某个对象, 如果是返回tru, 否则返回false\r\n*/\r\n\r\nexport function myInstanceOf(obj, Type) {\r\n  // 得到一个原型对象\r\n  let protoObj = obj.__proto__\r\n  while (protoObj!==null) { // 存在原型对象\r\n    // 如果就是Type的原型对象, 直接返回true\r\n    if (protoObj===Type.prototype) {\r\n      return true\r\n    } \r\n    // 取出下一个原型对象, 并保存\r\n    protoObj = protoObj.__proto__\r\n  }\r\n  // 出了循环, 说明类型不匹配\r\n  return false\r\n}","/* \r\n 1. 自定义new工具函数\r\n  语法: newInstance(Fn, ...args)\r\n  功能: 创建Fn构造函数的实例对象\r\n  实现: 创建空对象obj, 调用Fn指定this为obj, 返回obj\r\n*/\r\n\r\nexport function newInstance(Fn, ...args) {\r\n  \r\n  // 创建一个空对象\r\n  const obj = {}\r\n  \r\n\r\n  // 调用Fn函数, 且指定this是新创建对象\r\n  const result = Fn.apply(obj, args)\r\n  \r\n  // 如果Fn执行返回的是对象类型, 最终的结果就是这个对象\r\n  if (result instanceof Object) {\r\n    return result\r\n  }\r\n\r\n  // 让原型对象是空的object对象, 且constructor属性为Fn\r\n  /* \r\n  obj.__proto__ = {}\r\n  obj.__proto__.constructor = Fn\r\n  问题: 创建每个实例的原型对象不是同一个(实际要求的是同一个)\r\n  */\r\n  obj.__proto__ = Fn.prototype  // 将构造函数的显示原型属性值赋值实例对象的隐式原型属性\r\n\r\n  // 返回新建的对象\r\n  return obj\r\n}","/* \r\n语法: var new_array = slice(array, [begin[, end]])\r\n功能: 返回一个由 begin 和 end 决定的原数组的浅拷贝, 原始数组不会被改变\r\n*/\r\n\r\nexport function slice(array, begin, end) {\r\n  const arr = []\r\n\r\n  // 如果原数组是空组件, 直接返回\r\n  if (array.length===0) {\r\n    return arr\r\n  }\r\n  // 处理没有指定\r\n  begin = begin || 0\r\n  end = end || array.length\r\n  // 范围的限制\r\n  if (begin<0) {\r\n    begin = 0\r\n  }\r\n  if (end>array.length) {\r\n    end = array.length\r\n  }\r\n\r\n  for (let index = begin; index < end; index++) {\r\n    arr.push(array[index])\r\n  }\r\n\r\n  return arr\r\n}","/* \r\n用来返回节流函数的工具函数\r\n*/\r\nexport function throttle(callback, delay) {\r\n  let pre = 0 // 默认值不要是Date.now() ==> 第1次事件立即调用\r\n  return function (event) { // 节流函数/真正的事件回调函数   this是发生事件的标签\r\n    console.log('事件 throttle')\r\n    const current = Date.now()\r\n    if (current - pre > delay) { // 只有离上一次调用callback的时间差大于delay\r\n      // 调用真正处理事件的函数, this是事件源, 参数是event\r\n      callback.call(this, event)\r\n      // 记录此次调用的时间\r\n      pre = current\r\n    }\r\n  }\r\n}","\r\n\r\nexport function unique(array) {\r\n  const arr = []\r\n  const contain = {}\r\n  array.forEach(item => {\r\n    if (!contain.hasOwnProperty(item)) {\r\n      arr.push(item)\r\n      contain[item] = true\r\n    }\r\n  })\r\n\r\n  return arr\r\n}\r\n\r\n/**\r\n * \r\n * @param {Array} array \r\n * @param {string} key \r\n * @returns {Array}\r\n */\r\nexport function uniqueByAttr(array, key) {\r\n  const hash = {};\r\n  const arr = array.reduce((preVal, curVal) => {\r\n    hash[curVal[key]]\r\n      ? \"\"\r\n      : (hash[curVal[key]] = true && preVal.push(curVal));\r\n    return preVal;\r\n  }, []);\r\n  return arr;\r\n}"],"names":["call","fn","obj","window","tempFn","args","result","reduce","array","callback","initValue","total","index","length","filter","arr","element","push","some","concat","values","forEach","value","Array","isArray","type","data","Object","prototype","toString","compareObj","x","y","i","l","leftChain","rightChain","arguments","compare2Objects","isNaN","Date","RegExp","String","Number","isPrototypeOf","constructor","indexOf","p","hasOwnProperty","_typeof","pop","pull","item","splice","reverseString","str","split","reverse","join","axios","url","method","params","Promise","resolve","reject","toUpperCase","queryString","keys","key","substring","request","XMLHttpRequest","open","send","setRequestHeader","JSON","stringify","onreadystatechange","status","response","readyState","statusText","parse","Error","get","options","assign","post","put","eventBus","callbacksObj","on","eventName","callbacks","emit","off","PENDING","RESOLVED","REJECTED","excutor","self","this","reason","setTimeout","cbsObj","onRejected","undefined","onResolved","error","console","log","then","handle","all","promises","resolvedCount","race","resolveDelay","time","rejectDelay","PubSub","id","shellSort","len","distance","Math","floor","start","j","subscribe","msgName","token","publish","publishSync","unsubscribe","flag","find","storage","ls","localStorage","ss","sessionStorage","name","day","oDate","setting","slice","setDate","getDate","document","cookie","arr2","setCookie","val","setItem","getItem","removeItem","clear","QueueElement","priority","enqueue","dequeue","shift","front","size","isEmpty","peek","Num","replace","part","newchar","tmpnewchar","perchar","charAt","substr","search","args2","userAgent","navigator","isOpera","isIE","isIE11","isEdge","isFF","isSafari","isChrome","test","fIEVersion","parseFloat","word","toLowerCase","map","bigArr","smallArr","target","pre","compareArr","arr1","includes","num","today","nowTime","getTime","setTime","parseInt","oYear","getFullYear","oMoth","getMonth","oDay","delay","event","clearTimeout","timeoutId","_this","deepClone","Map","cloneTarget","set","deepClone2","deepClone3","deepFlatten","arrays","count","arrs","childs","attrArr","list","getObj","row","flatten1","amount","amounts","abs","toFixed","x1","x2","rgx","n","f","s","ceil","pow","round","rs","timestamp","format","add0","m","_timestamp","d","h","getHours","mm","getMinutes","getSeconds","object","pid","child","parents","dataToTree","children","c","_children","itemArr","objs","Type","protoObj","__proto__","Fn","apply","AA","BB","a","k","re","match","min","max","random","minIndex","begin","end","stamp1","stamp2","t","e","r","o","b","res","temp","current","now","contain","hash","preVal","curVal"],"mappings":"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"}